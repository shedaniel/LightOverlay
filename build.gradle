buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("commons-io:commons-io:2.6")
    }
}


import java.nio.file.*

plugins {
    id "architectury-plugin" version "3.0.76"
    id "forgified-fabric-loom" version "0.6.67" apply false
}

architectury {
    minecraft = minecraft_version
}

subprojects {
    apply plugin: "forgified-fabric-loom"

    loom {
        silentMojangMappingsLicense()
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"

    group "me.shedaniel"
    archivesBaseName = rootProject.name
    version = rootProject.mod_version

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
}

task buildMerged(type: Zip) {
    allprojects {
        dependsOn it.tasks.getByName("build")
    }
    def folder = file(".gradle/.mergemods")
    folder.mkdirs()
    def fabricJar = file("fabric/build/libs/${rootProject.name}-${rootProject.mod_version}-fabric.jar")
    def forgeJar = file("forge/build/libs/${rootProject.name}-${rootProject.mod_version}-forge.jar")
    def fabricFolder = new File(folder, ".tempFabric")
    def forgeFolder = new File(folder, ".tempForge")
    def mergeFolder = new File(folder, ".tempMerge")
    file("merging.policy").eachLine {
        if (it.isBlank() || it.startsWith("#")) return
        def env = it.substring(0, it.indexOf(' ')).toLowerCase()
        def path = Paths.get(it.substring(env.length() + 1)).toString()
        filesMatching(path) {
            if (!it._gr_dyn_.toString().contains(env)) {
                it.exclude()
            }
        }
    }
    forgeFolder.deleteDir()
    fabricFolder.deleteDir()
    mergeFolder.deleteDir()
    mergeFolder.mkdirs()
    archivesBaseName = "${rootProject.name}"
    archiveExtension = "jar"
    destinationDir = file('build/libs')
    duplicatesStrategy(DuplicatesStrategy.WARN)

    from zipTree(fabricJar)
    from zipTree(forgeJar)
}

rootProject.subprojects.forEach {
    buildMerged.mustRunAfter it.tasks.getByName("build")
}


